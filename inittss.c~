#include "inc/type.h"
#define TSSADDR 0x1CA00
typedef struct _tss
{
	b32	link;
	b32 esp0;
	b32 ss0;
	b32 esp1;
	b32 ss1;
	b32 esp2;
	b32 ss2;
	b32 cr3;
	b32 eip;
	b32 eflags;
	b32 eax;
	b32 ecx;
	b32 edx;
	b32 ebx;
	b32 esp;
	b32 ebp;
	b32 esi;
	b32 edi;
	b32 es;
	b32 cs;
	b32 ss;
	b32 ds;
	b32 fs;
	b32 gs;
	b32 ldt;
	b32 io_map;      //高16位为i/o位图相对于TSS段起始的16位偏移。第0位为调试陷阱位。如果置位，则在任务切换后新任务第一条指令执行前产生调试陷阱


}tss;

void loaddescriptor();
void set_tss()
{
	tss *tssaddr=(tss *)TSSADDR;
	tssaddr->esp0=0xBB00;
	tssaddr->ss0=selector_stack;
	tssaddr->esp2=0x10FFFE0;
	tssaddr->ss2=selector_stack;
	tssaddr->esp1=0;
	tssaddr->ss1=0;
	tssaddr->cr3=0x100000;
	tssaddr->ldt=0;
	b32 io_map=TSSADDR+0x64;
	tssaddr->io_map=(io_map <<16)|1;
	b32 *set_0=(b32 *)(io_map+4);
	b32 i=0;
	while(i<2048)
	{
		*(set_0+i)=0xFFFFFFFF;
		i++;
	}
	loaddescriptor(5,TSSADDR,0x0000|DA_LIMIT_4K|DA_386TSS,0x2044);
	asm volatile(
		"mov	$0x28,%%ax \n\t"
		"ltr	%%ax \n\t"
		:::"%ax");
}

//为任务调度提供TSS操作函数

void tssin(tss *tssaddr,b32 esp0,b32,ss0,b32 cr3,b32 eip,b32 eflags,b32 eax,
		b32 ecx,b32 edx,b32 ebx,b32 esp,b32 ebp,b32 esi,b32 edi,b32 es,
		b32 cs,b32 ss,b32 ds,b32 fs,b32 gs,)
{
	tssaddr->esp0=esp0;
	tssaddr->ss0=ss0;
	tssaddr->cr3=cr3;
	tssaddr->eip=eip;
	tssaddr->eflags=eflags;
	tssaddr->eax=eax;
	tssaddr->ecx=ecx;
	tssaddr->edx=edx;
	tssaddr->ebx=ebx;
	tssaddr->esp=esp;
	tssaddr->ebp=ebp;
	tssaddr->esi=esi;
	tssaddr->edi=edi;
	tssaddr->es=es;
	tssaddr->cs=cs;
	tssaddr->ss=ss;
	tssaddr->ds=ds;
	tssaddr->fs=fs;
	tssaddr->gs=gs;
}

void tssout()
